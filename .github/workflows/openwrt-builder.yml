name: OpenWrt Builder

on:
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Perform clean build'
        required: false
        default: 'false'
      config_profile:
        description: 'Device profile (e.g. x86-64, raspberrypi)'
        required: false
        default: 'generic'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 240

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential ccache cmake cpio curl g++-multilib gawk gettext \
          git libncurses-dev libssl-dev python3 python3-pip rsync unzip wget
        sudo pip3 install pyyaml

    - name: Prepare Workspace
      run: |
        if [ "${{ inputs.clean_build }}" = "true" ]; then
          rm -rf /workdir/openwrt
        fi
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone Source
      working-directory: /workdir
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load Custom Configuration
      run: |
        cd openwrt
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF feeds.conf.default
        
        if [ -f "$GITHUB_WORKSPACE/$DIY_P1_SH" ]; then
          chmod +x "$GITHUB_WORKSPACE/$DIY_P1_SH"
          "$GITHUB_WORKSPACE/$DIY_P1_SH"
        fi

    - name: Update Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Apply Device Config
      run: |
        cd openwrt
        [ -e files ] && mv files openwrt/files
        if [ -f "$GITHUB_WORKSPACE/$DIY_P2_SH" ]; then
          chmod +x "$GITHUB_WORKSPACE/$DIY_P2_SH"
          "$GITHUB_WORKSPACE/$DIY_P2_SH"
        elif [ -f "$GITHUB_WORKSPACE/$CONFIG_FILE" ]; then
          mv "$GITHUB_WORKSPACE/$CONFIG_FILE" .config
        else
          make defconfig
        fi

    - name: Download Packages
      id: package
      run: |
        cd openwrt
        make defconfig
        
        # Three-stage download with retries
        for attempt in {1..3}; do
          echo "Download attempt $attempt/3"
          if make -j$(($(nproc)*2)) download; then
            break
          elif [ $attempt -eq 3 ]; then
            find dl -size -1k -delete
            make -j1 download V=s
          fi
          sleep 10
        done

    - name: Compile Firmware
      id: compile
      run: |
        cd openwrt
        echo "Using $(nproc) threads for compilation"
        make -j$(nproc) || {
          echo "Parallel build failed, retrying with single thread..."
          make -j1 V=s
        }
        
        DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' || echo "generic")
        echo "DEVICE_NAME=${DEVICE_NAME}" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: openwrt-${{ env.DEVICE_NAME }}-${{ env.BUILD_DATE }}
        path: |
          openwrt/bin/targets/*/*
          openwrt/.config
        retention-days: 7

    - name: Create Release
      if: success() && env.UPLOAD_RELEASE == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: build-${{ env.BUILD_DATE }}
        files: openwrt/bin/targets/*/*

    - name: Cleanup
      if: always()
      run: |
        df -hT
        echo "Disk usage report completed"
