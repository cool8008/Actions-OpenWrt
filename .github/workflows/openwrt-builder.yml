name: OpenWrt Build with Space Optimization & Artifact Upload

on:
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Perform clean build'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  KWRT_PKG: https://github.com/kiddin9/kwrt-packages.git
  BUILD_DIR: openwrt
  ARTIFACT_NAME: openwrt-bin-${{ github.run_id }}
  MAX_CCACHE_SIZE: 2G
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
    # 磁盘空间优化部分
    - name: Setup Disk Space
      run: |
        # 清理系统缓存
        sudo swapoff -a && sudo rm -f /swapfile
        sudo apt-get clean
        docker rmi -f $(docker images -aq) || true
        
        # 创建虚拟内存
        sudo fallocate -l 4G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile

    - name: Checkout with Space Saving
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          config/
          feeds.conf.default
          package/
        fetch-depth: 1

    - name: Smart Source Clone
      run: |
        [ -d $BUILD_DIR ] || git clone --depth 1 --filter=blob:none \
          --sparse $REPO_URL $BUILD_DIR
        cd $BUILD_DIR
        git sparse-checkout set \
          package feeds scripts config

    # 编译过程优化
    - name: Optimized Build Setup
      run: |
        cd $BUILD_DIR
        # 磁盘敏感型配置
        echo "CONFIG_AUTOREMOVE=y" >> .config
        echo "CONFIG_CCACHE_COMPRESS=y" >> .config
        sed -i "s|tmp/.ccache|${{ github.workspace }}/.ccache|" rules.mk
        
        # 限制ccache大小
        ccache -M $MAX_CCACHE_SIZE
        ccache -s

    - name: Build Process
      run: |
        cd $BUILD_DIR
        [ "${{ inputs.clean_build }}" = "true" ] && make clean
        
        # 分段构建节省内存
        make -j$(nproc) tools/install
        make -j$(nproc) toolchain/install
        
        # 主构建过程
        make -j$(($(nproc)/2)) \
          CONFIG_AUTOREMOVE=y \
          CONFIG_DEBUG_SECTION_MISMATCH=y
        
        # 立即清理中间文件
        find build_dir -name '*.o' -delete
        rm -rf logs/ tmp/

    # 固件处理与上传
    - name: Package Artifacts
      run: |
        cd $BUILD_DIR/bin/targets
        find . -name '*.bin' -exec ls -lh {} \;
        
        # 创建带日期的压缩包
        TIMESTAMP=$(date +%Y%m%d-%H%M)
        tar --exclude='*.manifest' --exclude='*.buildinfo' \
          -czvf $ARTIFACT_NAME-$TIMESTAMP.tar.gz */**

    - name: Upload Firmware
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.BUILD_DIR }}/bin/targets/${{ env.ARTIFACT_NAME }}*.tar.gz
        retention-days: 7
