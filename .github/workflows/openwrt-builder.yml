name: OpenWrt Builder with Space Optimization

on:
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Perform clean build'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  KWRT_PKG_URL: https://github.com/kiddin9/kwrt-packages.git
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 240

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Clone Source (Optimized)
      run: |
        # 智能克隆策略
        git clone --depth=1 --filter=tree:0 \
          --sparse ${{ env.REPO_URL }} openwrt
        cd openwrt
        git sparse-checkout set \
          package \
          feeds \
          scripts \
          include \
          tools \
          config \
          target
        
        # 显示初始空间占用
        echo "::group::Initial Repository Size"
        du -sh .
        echo "::endgroup::"

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential ccache libncurses-dev zlib1g-dev \
          python3 python3-setuptools rsync unzip

    - name: Configure Feeds with Space Saving
      run: |
        cd openwrt
        # 动态配置feeds
        echo "src-git kiddin9 https://github.com/kiddin9/kwrt-packages.git;;main" >> feeds.conf.default
        ./scripts/feeds update -a
        
        # 选择性安装必要包
        ./scripts/feeds install -a -p kiddin9 \
          luci-app-passwall \
          luci-app-ssr-plus \
          luci-theme-material
        
        # 最小化基础安装
        ./scripts/feeds install \
          busybox dnsmasq firewall kmod-nft-offload

    - name: Apply Optimized Configuration
      run: |
        cd openwrt
        # 启用压缩选项
        cat >> .config <<EOF
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        CONFIG_TARGET_IMAGES_GZIP=y
        CONFIG_KERNEL_ZSTD=y
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        CONFIG_CCACHE_DIR="/tmp/ccache"
        CONFIG_CCACHE_BASEDIR="$(pwd)"
        CONFIG_BUILD_LOG=y
        EOF

        # 空间优化配置
        sed -i '/CONFIG_DEBUG_INFO/d' .config
        echo "CONFIG_DEBUG_INFO=n" >> .config
        echo "CONFIG_COLLECT_KERNEL_DEBUG=n" >> .config

    - name: Setup Caching
      uses: actions/cache@v3
      with:
        path: |
          openwrt/dl
          /tmp/ccache
        key: ${{ runner.os }}-openwrt-${{ hashFiles('openwrt/feeds.conf.default') }}

    - name: Download Packages
      run: |
        cd openwrt
        # 分块下载策略
        for PKG_CAT in base packages luci; do
          make package/$PKG_CAT/download -j$(nproc)
          find dl -size -1k -delete
        done

    - name: Build Stage 1 - Toolchain
      run: |
        cd openwrt
        echo "::group::Building Toolchain"
        make tools/compile toolchain/compile -j$(($(nproc)/2))
        echo "::endgroup::"
        
        # 清理临时文件
        rm -rf build_dir/toolchain-*/.built

    - name: Build Stage 2 - Kernel
      run: |
        cd openwrt
        echo "::group::Building Kernel"
        make target/linux/compile -j$(($(nproc)/2))
        echo "::endgroup::"
        
        # 清理内核中间文件
        find build_dir -name "*.o" -delete
        rm -rf build_dir/target-*/linux-*/linux-*

    - name: Build Stage 3 - Packages
      run: |
        cd openwrt
        # 分批次编译
        for PKG_GROUP in base libs network luci; do
          echo "::group::Building $PKG_GROUP packages"
          make package/$PKG_GROUP/compile -j$(($(nproc)/2))
          echo "::endgroup::"
          
          # 及时清理
          find build_dir -name "*.o" -delete
          find staging_dir -name "*.a" -delete
          ccache -c
        done

    - name: Build Final Image
      run: |
        cd openwrt
        echo "::group::Generating Image"
        make -j1 image \
          FILES_REMOVE="/usr/lib/debug /usr/lib/opkg /usr/share/man" \
          IMAGE_ROOTFS_EXTRA_SPACE=0
        echo "::endgroup::"
        
        # 生成版本信息
        DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | cut -d_ -f4)
        echo "DEVICE_NAME=${DEVICE_NAME:-generic}" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV

    - name: Post-Build Cleanup
      run: |
        cd openwrt
        # 最终清理
        rm -rf build_dir staging_dir tmp
        ccache -c
        
        # 空间验证
        echo "::group::Final Disk Usage"
        df -h
        du -sh bin/*
        echo "::endgroup::"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-${{ env.DEVICE_NAME }}-${{ env.BUILD_DATE }}
        path: openwrt/bin/targets
        retention-days: 1

    - name: Cleanup ZRAM
      if: always()
      run: |
        sudo swapoff /dev/zram0
        sudo rmmod zram
